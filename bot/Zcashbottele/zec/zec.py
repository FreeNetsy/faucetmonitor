import base64
exec(base64.b64decode('ZnJvbSB0ZWxldGhvbiBpbXBvcnQgVGVsZWdyYW1DbGllbnQsIHN5bmMsIGV2ZW50cwpmcm9tIHRlbGV0aG9uLnRsLmZ1bmN0aW9ucy5tZXNzYWdlcyBpbXBvcnQgKAogICAgR2V0SGlzdG9yeVJlcXVlc3QsCiAgICBHZXRCb3RDYWxsYmFja0Fuc3dlclJlcXVlc3QsCikKZnJvbSB0ZWxldGhvbi5lcnJvcnMgaW1wb3J0IFNlc3Npb25QYXNzd29yZE5lZWRlZEVycm9yCmZyb20gdGVsZXRob24uZXJyb3JzIGltcG9ydCBGbG9vZFdhaXRFcnJvcgpmcm9tIHRpbWUgaW1wb3J0IHNsZWVwCmltcG9ydCBqc29uLCByZSwgc3lzLCBvcwoKdHJ5OgogICAgaW1wb3J0IHdlYmJyb3dzZXIKICAgIGltcG9ydCByZXF1ZXN0cwogICAgZnJvbSBiczQgaW1wb3J0IEJlYXV0aWZ1bFNvdXAKZXhjZXB0OgogICAgcHJpbnQoCiAgICAgICAgIlwwMzNbMTszMG0jIFwwMzNbMTszMW0gUmVxdWVzdHMgYW5kIEJzNCBNb2R1bGUgSXMgbm90IGluc3RhbGxlZCBcblwwMzNbMTszMG0jIFwwMzNbMTszMW1UbyBpbnN0YWxsIFBsZWFzZSBUeXBlIHBpcCBpbnN0YWxsIHJlcXVlc3RzIGFuZCBwaXAgaW5zdGFsbCBiczQiCiAgICApCiAgICBzeXMuZXhpdAoKCgpjID0gcmVxdWVzdHMuc2Vzc2lvbigpCgpmb3IgaSBpbiByYW5nZSg1MDAwMDAwKToKICAgICAgICBzeXMuc3Rkb3V0LndyaXRlKCJcciIpCiAgICAgICAgc3lzLnN0ZG91dC53cml0ZSgiXDAzM1sxOzMwbSMgXDAzM1sxOzMzbVN0YXJ0aW5nIENsaWNrQm90IikKICAgICAgICBzeXMuc3Rkb3V0LmZsdXNoKCkgCiAgICAgICAgc2xlZXAoMikKICAgICAgICBvcy5zeXN0ZW0oImNsZWFyIikKICAgICAgICBicmVhawpvcy5zeXN0ZW0oInRlcm11eC1vcGVuLXVybCBodHRwczovL3lvdXR1YmUuY29tL2NoYW5uZWwvVUNBbVFlR21ScDBrc19HWjgzNnphcFhRIikKCmJhbm5lciA9ICIiIlwwMzNbMzRtCiAgX19fX19fX19fXyBfX19fICAgICAgICAgXyBfICAgICAgXyAgICBfICAgICAgICAgICBfICAgCiB8X18gIC8gX19fXy8gX19ffCAgICBfX198IChfKSBfX198IHwgX3wgfF9fICAgX19fIHwgfF8gCiAgIC8gL3wgIF98fCB8ICAgICAgIC8gX198IHwgfC8gX198IHwvIC8gJ18gXCAvIF8gXHwgX198CiAgLyAvX3wgfF9ffCB8X19fICAgfCAoX198IHwgfCAoX198ICAgPHwgfF8pIHwgKF8pIHwgfF8gCiAvX19fX3xfX19fX1xfX19ffF9fX1xfX198X3xffFxfX198X3xcX1xfLl9fLyBcX19fLyBcX198CiAgICAgICAgICAgICAgICB8X19fX198ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKXDAzM1syOzMxbUxJS0UgQU5EIFNVQkNSSUJFIApcMDMzWzE7MzJtWW91dHViZSAgIFwwMzNbMTszMW0gOiBcMDMzWzQ7MzFtaGh0dHBzOi8veW91dHViZS5jb20vY2hhbm5lbC9VQ0FtUWVHbVJwMGtzX0daODM2emFwWFEgIiIiCgoKaWYgbm90IG9zLnBhdGguZXhpc3RzKCJzZXNzaW9uIik6CiAgICBvcy5tYWtlZGlycygic2Vzc2lvbiIpCgpwcmludChiYW5uZXIpCmlmIGxlbihzeXMuYXJndikgPCAyOgogICAgcHJpbnQoIlxuXG5cblwwMzNbMTszMm1Vc2FnZSA6IHB5dGhvbiBtYWluLnB5ICs2MiIpCiAgICBzeXMuZXhpdCgxKQoKCmRlZiBPcGVuTGluayhsaW5rKTogCiAgICAgICAgb3Muc3lzdGVtKCJ0ZXJtdXgtb3Blbi11cmwgaHR0cHM6Ly95b3V0dWJlLmNvbS9jaGFubmVsL1VDQW1RZUdtUnAwa3NfR1o4MzZ6YXBYUSNzZWFyY2hpbmciKQoKZGVmIHR1bmdndSh4KToKICAgIHN5cy5zdGRvdXQud3JpdGUoIlxyIikKICAgIHN5cy5zdGRvdXQud3JpdGUoIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIpCiAgICBmb3IgcmVtYWluaW5nIGluIHJhbmdlKHgsIDAsIC0xKToKICAgICAgICBzeXMuc3Rkb3V0LndyaXRlKCJcciIpCiAgICAgICAgc3lzLnN0ZG91dC53cml0ZSgKICAgICAgICAgICAgIlwwMzNbMTszMW0jXDAzM1szNG17OjJkfSBcMDMzWzE7MzJtU2Vjb25kcyBSZW1haW5pbmciLmZvcm1hdChyZW1haW5pbmcpCiAgICAgICAgKQogICAgICAgIHN5cy5zdGRvdXQuZmx1c2goKQogICAgICAgIHNsZWVwKDEpCgoKdWEgPSB7CiAgICAiVXNlci1BZ2VudCI6ICJNb3ppbGxhLzUuMCAoTGludXg7IEFuZHJvaWQgNS4xOyBBMTYwMyBCdWlsZC9MTVk0N0k7IHd2KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBWZXJzaW9uLzQuMCBDaHJvbWUvNDMuMC4yMzU3LjEyMSBNb2JpbGUgU2FmYXJpLzUzNy4zNiIKfQoKCmFwaV9pZCA9IDcxNzQyNQphcGlfaGFzaCA9ICIzMjI1MjZkMmMzMzUwYjFkMzUzMGRlMzI3Y2YwOGMwNyIKcGhvbmVfbnVtYmVyID0gc3lzLmFyZ3ZbMV0KCmNsaWVudCA9IFRlbGVncmFtQ2xpZW50KCJzZXNzaW9uLyIgKyBwaG9uZV9udW1iZXIsIGFwaV9pZCwgYXBpX2hhc2gpCmNsaWVudC5jb25uZWN0KCkKaWYgbm90IGNsaWVudC5pc191c2VyX2F1dGhvcml6ZWQoKToKICAgIHRyeToKICAgICAgICBjbGllbnQuc2VuZF9jb2RlX3JlcXVlc3QocGhvbmVfbnVtYmVyKQogICAgICAgIG1lID0gY2xpZW50LnNpZ25faW4ocGhvbmVfbnVtYmVyLCBpbnB1dCgiXG5cblxuXDAzM1sxOzM0bUVudGVyIFlvdXIgQ29kZSA6ICIpKQogICAgZXhjZXB0IFNlc3Npb25QYXNzd29yZE5lZWRlZEVycm9yOgogICAgICAgIHBhc3N3ID0gaW5wdXQoIlwwMzNbMTswbVlvdXIgMmZhIFBhc3N3b3JkIDogIikKICAgICAgICBtZSA9IGNsaWVudC5zdGFydChwaG9uZV9udW1iZXIsIHBhc3N3KQpteXNlbGYgPSBjbGllbnQuZ2V0X21lKCkKb3Muc3lzdGVtKCJjbGVhciIpCnByaW50KGJhbm5lcikKcHJpbnQoCiAgICAiXDAzM1sxOzMzbUxvZ2luIEFzXDAzM1sxOzBtOiIsCiAgICBteXNlbGYuZmlyc3RfbmFtZSwKICAgICJcblwwMzNbMzRtV0VMQ09NRSBUTyBaRUNfQ2xpY2tib3QiLAopCgoKI3Bhc3N3b3JkKCkKcHJpbnQoIlxuXG5cMDMzWzMybVN0YXJ0aW5nIEJvdCBXb3JrZXIuLi4iKQp0cnk6CiAgICBjaGFubmVsX2VudGl0eSA9IGNsaWVudC5nZXRfZW50aXR5KCJAWmNhc2hfY2xpY2tfYm90IikKICAgIGNoYW5uZWxfdXNlcm5hbWUgPSAiQFpjYXNoX2NsaWNrX2JvdCIKICAgIGZvciBpIGluIHJhbmdlKDUwMDAwMDApOgogICAgICAgIHN5cy5zdGRvdXQud3JpdGUoIlxyIikKICAgICAgICBzeXMuc3Rkb3V0LndyaXRlKAogICAgICAgICAgICAiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgKQogICAgICAgIHN5cy5zdGRvdXQud3JpdGUoIlxyIikKICAgICAgICBzeXMuc3Rkb3V0LndyaXRlKCJcMDMzWzE7MzBtIyBcMDMzWzM0bVN0YXJ0IFZpc2l0aW5nIFNpdGUiKQogICAgICAgIHN5cy5zdGRvdXQuZmx1c2goKQogICAgICAgIGNsaWVudC5zZW5kX21lc3NhZ2UoZW50aXR5PWNoYW5uZWxfZW50aXR5LCBtZXNzYWdlPSLppoPmnrwgVmlzaXQgc2l0ZXMiKQogICAgICAgIHNsZWVwKDEwKQogICAgICAgIHBvc3RzID0gY2xpZW50KAogICAgICAgICAgICBHZXRIaXN0b3J5UmVxdWVzdCgKICAgICAgICAgICAgICAgIHBlZXI9Y2hhbm5lbF9lbnRpdHksCiAgICAgICAgICAgICAgICBsaW1pdD0xLAogICAgICAgICAgICAgICAgb2Zmc2V0X2RhdGU9Tm9uZSwKICAgICAgICAgICAgICAgIG9mZnNldF9pZD0wLAogICAgICAgICAgICAgICAgbWF4X2lkPTAsCiAgICAgICAgICAgICAgICBtaW5faWQ9MCwKICAgICAgICAgICAgICAgIGFkZF9vZmZzZXQ9MCwKICAgICAgICAgICAgICAgIGhhc2g9MCwKICAgICAgICAgICAgKQogICAgICAgICkKICAgICAgICBpZiAoCiAgICAgICAgICAgIHBvc3RzLm1lc3NhZ2VzWzBdLm1lc3NhZ2UuZmluZCgiU29ycnksIHRoZXJlIGFyZSBubyBuZXcgYWRzIGF2YWlsYWJsZSIpCiAgICAgICAgICAgICE9IC0xCiAgICAgICAgKToKICAgICAgICAgICAgcHJpbnQoIlxuXDAzM1sxOzMzbSMgXDAzM1s0OzMxbSBTb3JyeSBObyBBZHMgQXZhaWxhYmVsIFlldFxuIikKICAgICAgICAgICAgY2xpZW50LnNlbmRfbWVzc2FnZShlbnRpdHk9Y2hhbm5lbF9lbnRpdHksIG1lc3NhZ2U9Iummg+aMtSBCYWxhbmNlIikKICAgICAgICAgICAgc2xlZXAoNSkKICAgICAgICAgICAgcG9zdHMgPSBjbGllbnQoCiAgICAgICAgICAgICAgICBHZXRIaXN0b3J5UmVxdWVzdCgKICAgICAgICAgICAgICAgICAgICBwZWVyPWNoYW5uZWxfZW50aXR5LAogICAgICAgICAgICAgICAgICAgIGxpbWl0PTEsCiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0X2RhdGU9Tm9uZSwKICAgICAgICAgICAgICAgICAgICBvZmZzZXRfaWQ9MCwKICAgICAgICAgICAgICAgICAgICBtYXhfaWQ9MCwKICAgICAgICAgICAgICAgICAgICBtaW5faWQ9MCwKICAgICAgICAgICAgICAgICAgICBhZGRfb2Zmc2V0PTAsCiAgICAgICAgICAgICAgICAgICAgaGFzaD0wLAogICAgICAgICAgICAgICAgKQogICAgICAgICAgICApCiAgICAgICAgICAgIG1lc3NhZ2UgPSBwb3N0cy5tZXNzYWdlc1swXS5tZXNzYWdlCiAgICAgICAgICAgIHByaW50KG1lc3NhZ2UpCiAgICAgICAgICAgIHN5cy5leGl0KCkKICAgICAgICBlbHNlOgogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICB1cmwgPSBwb3N0cy5tZXNzYWdlc1swXS5yZXBseV9tYXJrdXAucm93c1swXS5idXR0b25zWzBdLnVybAogICAgICAgICAgICAgICAgc3lzLnN0ZG91dC53cml0ZSgiXHIiKQogICAgICAgICAgICAgICAgc3lzLnN0ZG91dC53cml0ZSgiXDAzM1sxOzMybSMgXDAzM1sxOzMzbVZpc2l0ICIgKyB1cmwpCiAgICAgICAgICAgICAgICBzeXMuc3Rkb3V0LmZsdXNoKCkKICAgICAgICAgICAgICAgIG9zLnN5c3RlbSgidGVybXV4LW9wZW4tdXJsIFwiIit1cmwrIlwiIikKICAgICAgICAgICAgICAgIGlkID0gcG9zdHMubWVzc2FnZXNbMF0uaWQKICAgICAgICAgICAgICAgIHIgPSBjLmdldCh1cmwsIGhlYWRlcnM9dWEsIHRpbWVvdXQ9MTUsIGFsbG93X3JlZGlyZWN0cz1UcnVlKQogICAgICAgICAgICAgICAgc291cCA9IEJlYXV0aWZ1bFNvdXAoci5jb250ZW50LCAiaHRtbC5wYXJzZXIiKQogICAgICAgICAgICAgICAgaWYgKAogICAgICAgICAgICAgICAgICAgIHNvdXAuZmluZCgiZGl2IiwgaWQ9ImhlYWRiYXIiKSBpcyBOb25lCiAgICAgICAgICAgICAgICApOgogICAgICAgICAgICAgICAgICAgIHNsZWVwKDIpCiAgICAgICAgICAgICAgICAgICAgcG9zdHMgPSBjbGllbnQoCiAgICAgICAgICAgICAgICAgICAgICAgIEdldEhpc3RvcnlSZXF1ZXN0KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVlcj1jaGFubmVsX2VudGl0eSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbWl0PTEsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXRfZGF0ZT1Ob25lLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0X2lkPTAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXhfaWQ9MCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbl9pZD0wLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkX29mZnNldD0wLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFzaD0wLAogICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBwb3N0cy5tZXNzYWdlc1swXS5tZXNzYWdlCiAgICAgICAgICAgICAgICAgICAgaWYgKAogICAgICAgICAgICAgICAgICAgICAgICBwb3N0cy5tZXNzYWdlc1swXS5tZXNzYWdlLmZpbmQoIllvdSBtdXN0IHN0YXkiKSAhPSAtMQogICAgICAgICAgICAgICAgICAgICAgICBvciBwb3N0cy5tZXNzYWdlc1swXS5tZXNzYWdlLmZpbmQoIlBsZWFzZSBzdGF5IG9uIikgIT0gLTEKICAgICAgICAgICAgICAgICAgICApOgogICAgICAgICAgICAgICAgICAgICAgICBzZWMgPSByZS5maW5kYWxsKHIiKFtcZC5dKlxkKykiLCBtZXNzYWdlKQogICAgICAgICAgICAgICAgICAgICAgICB0dW5nZ3UoaW50KHNlY1swXSkpCiAgICAgICAgICAgICAgICAgICAgICAgIHNsZWVwKDEpCiAgICAgICAgICAgICAgICAgICAgICAgIHBvc3RzID0gY2xpZW50KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgR2V0SGlzdG9yeVJlcXVlc3QoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVlcj1jaGFubmVsX2VudGl0eSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW1pdD0yLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldF9kYXRlPU5vbmUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0X2lkPTAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF4X2lkPTAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWluX2lkPTAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkX29mZnNldD0wLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhc2g9MCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlcmVzID0gcG9zdHMubWVzc2FnZXNbMV0ubWVzc2FnZQogICAgICAgICAgICAgICAgICAgICAgICBzbGVlcCgyKQogICAgICAgICAgICAgICAgICAgICAgICBzeXMuc3Rkb3V0LndyaXRlKCJcclwwMzNbMTszMG0jIFwwMzNbMTszMm0iICsgbWVzc2FnZXJlcyArICJcbiIpCiAgICAgICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICAgICAgcGFzcwoKICAgICAgICAgICAgICAgIGVsaWYgc291cC5maW5kKCJkaXYiLCBpZD0iaGVhZGJhciIpIGlzIG5vdCBOb25lOgogICAgICAgICAgICAgICAgICAgIGZvciBkYXQgaW4gc291cC5maW5kX2FsbCgiZGl2IiwgY2xhc3NfPSJjb250YWluZXItZmx1aWQiKToKICAgICAgICAgICAgICAgICAgICAgICAgY29kZSA9IGRhdC5nZXQoImRhdGEtY29kZSIpCiAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVyID0gZGF0LmdldCgiZGF0YS10aW1lciIpCiAgICAgICAgICAgICAgICAgICAgICAgIHRva2VuYSA9IGRhdC5nZXQoImRhdGEtdG9rZW4iKQogICAgICAgICAgICAgICAgICAgICAgICB0dW5nZ3UoaW50KHRpbWVyKSkKICAgICAgICAgICAgICAgICAgICAgICAgciA9IGMucG9zdCgKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJodHRwczovL2RvZ2VjbGljay5jb20vcmV3YXJkIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE9eyJjb2RlIjogY29kZSwgInRva2VuIjogdG9rZW5hfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnM9dWEsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lb3V0PTE1LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxsb3dfcmVkaXJlY3RzPVRydWUsCiAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAganMgPSBqc29uLmxvYWRzKHIudGV4dCkKICAgICAgICAgICAgICAgICAgICAgICAgc3lzLnN0ZG91dC53cml0ZSgKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJcclwwMzNbMTszMG0jIFwwMzNbMTszMm1Zb3UgZWFybmVkICIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICsganNbInJld2FyZCJdCiAgICAgICAgICAgICAgICAgICAgICAgICAgICArICIgWkVDIGZvciB2aXNpdGluZyBhIHNpdGUhXG4iCiAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgc3lzLnN0ZG91dC53cml0ZSgiXHIiKQogICAgICAgICAgICAgICAgICAgIHN5cy5zdGRvdXQud3JpdGUoCiAgICAgICAgICAgICAgICAgICAgICAgICIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICBzeXMuc3Rkb3V0LndyaXRlKCJcciIpCiAgICAgICAgICAgICAgICAgICAgc3lzLnN0ZG91dC53cml0ZSgiXDAzM1sxOzMwbSMgXDAzM1sxOzMxbUNhcHRjaGEgRGV0ZWN0ZWQiKQogICAgICAgICAgICAgICAgICAgIHN5cy5zdGRvdXQuZmx1c2goKQogICAgICAgICAgICAgICAgICAgIHNsZWVwKDIpCiAgICAgICAgICAgICAgICAgICAgY2xpZW50KAogICAgICAgICAgICAgICAgICAgICAgICBHZXRCb3RDYWxsYmFja0Fuc3dlclJlcXVlc3QoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFubmVsX3VzZXJuYW1lLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhPXBvc3RzLm1lc3NhZ2VzWzBdLnJlcGx5X21hcmt1cC5yb3dzWzFdLmJ1dHRvbnNbMV0uZGF0YSwKICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICBzeXMuc3Rkb3V0LndyaXRlKAogICAgICAgICAgICAgICAgICAgICAgICAiXHJcMDMzWzE7MzBtIyBcMDMzWzE7MzFtU2tpcCBDYXB0Y2hhLi4uISAgICAgICBcbiIKICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgc2xlZXAoMikKICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgc2xlZXAoMykKICAgICAgICAgICAgICAgIHBvc3RzID0gY2xpZW50KAogICAgICAgICAgICAgICAgICAgIEdldEhpc3RvcnlSZXF1ZXN0KAogICAgICAgICAgICAgICAgICAgICAgICBwZWVyPWNoYW5uZWxfZW50aXR5LAogICAgICAgICAgICAgICAgICAgICAgICBsaW1pdD0xLAogICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXRfZGF0ZT1Ob25lLAogICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXRfaWQ9MCwKICAgICAgICAgICAgICAgICAgICAgICAgbWF4X2lkPTAsCiAgICAgICAgICAgICAgICAgICAgICAgIG1pbl9pZD0wLAogICAgICAgICAgICAgICAgICAgICAgICBhZGRfb2Zmc2V0PTAsCiAgICAgICAgICAgICAgICAgICAgICAgIGhhc2g9MCwKICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBtZXNzYWdlID0gcG9zdHMubWVzc2FnZXNbMF0ubWVzc2FnZQogICAgICAgICAgICAgICAgaWYgKAogICAgICAgICAgICAgICAgICAgIHBvc3RzLm1lc3NhZ2VzWzBdLm1lc3NhZ2UuZmluZCgiWW91IG11c3Qgc3RheSIpICE9IC0xCiAgICAgICAgICAgICAgICAgICAgb3IgcG9zdHMubWVzc2FnZXNbMF0ubWVzc2FnZS5maW5kKCJQbGVhc2Ugc3RheSBvbiIpICE9IC0xCiAgICAgICAgICAgICAgICApOgogICAgICAgICAgICAgICAgICAgIHNlYyA9IHJlLmZpbmRhbGwociIoW1xkLl0qXGQrKSIsIG1lc3NhZ2UpCiAgICAgICAgICAgICAgICAgICAgdHVuZ2d1KGludChzZWNbMF0pKQogICAgICAgICAgICAgICAgICAgIHNsZWVwKDEpCiAgICAgICAgICAgICAgICAgICAgcG9zdHMgPSBjbGllbnQoCiAgICAgICAgICAgICAgICAgICAgICAgIEdldEhpc3RvcnlSZXF1ZXN0KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVlcj1jaGFubmVsX2VudGl0eSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbWl0PTIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXRfZGF0ZT1Ob25lLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0X2lkPTAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXhfaWQ9MCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbl9pZD0wLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkX29mZnNldD0wLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFzaD0wLAogICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VyZXMgPSBwb3N0cy5tZXNzYWdlc1sxXS5tZXNzYWdlCiAgICAgICAgICAgICAgICAgICAgc2xlZXAoMikKICAgICAgICAgICAgICAgICAgICBzeXMuc3Rkb3V0LndyaXRlKCJcclwwMzNbMTszMG0jIFwwMzNbMTszMm0iICsgbWVzc2FnZXJlcyArICJcbiIpCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIHBhc3MKCmZpbmFsbHk6CiAgICBjbGllbnQuZGlzY29ubmVjdCgpCg=='))